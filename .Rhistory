# stack models
d_stack <- select(d_fits, -Asterio) %>%
pivot_longer(., names_to = 'model_name', values_to = 'fit', beta:weibull)
# get predictions using augment
newdata <- tibble(temp = seq(min(Asterio_Hi$temp), max(Asterio_Hi$temp), length.out = 100))
d_preds <- d_stack %>%
mutate(., preds = map(fit, augment, newdata = newdata)) %>%
select(-fit) %>%
unnest(preds)
# take a random point from each model for labelling
d_labs <- filter(d_preds, temp < 30) %>%
group_by(., model_name) %>%
sample_n(., 1) %>%
ungroup()
# plot
ggplot(d_preds, aes(temp, rate)) +
geom_point(aes(temp, rate), Asterio_Hi) +
geom_line(aes(temp, .fitted), col = 'blue') +
facet_wrap(~model_name, scales = 'free', ncol = 4) +
theme_bw(base_size = 12) +
theme(legend.position = 'none',
strip.text = element_text(hjust = 0),
strip.background = element_blank()) +
labs(x = 'Temperature (ºC)',
y = 'Metabolic rate',
title = 'Fits of every model with Topt available in rTPC') +
geom_hline(aes(yintercept = 0), linetype = 2)
str(d_stack)
#### Model selection ####
#As can be seen in the above plot, there is some variation in how the different model formulations fit to the data.
#We can use a information theoretic approach to compare between different models, using  measures of relative model fit - such as AIC, BIC, and AICc (AIC correcting for small sample size).
#AIC and BIC are both returned by **broom::glance()**, and AICc can be added using **MuMIn::AICc()**
#{r calculate_fit_measures}
d_ic <- d_stack %>%
mutate(.,
AICc =  map_dbl(fit, MuMIn::AICc)) %>%
select(-fit) %>%
arrange(AICc)
d_ic
#{r model_selection, fig.width=6, fig.height = 4}
# filter for best model
best_model = 'thomas'
best_model
# get colour code
col_best_mod = RColorBrewer::brewer.pal(n = 6, name = "Dark2")[6]
# plot
ggplot(d_preds, aes(temp, .fitted)) +
geom_line(aes(group = model_name), col = 'grey50', alpha = 0.5) +
geom_line(data = filter(d_preds, model_name == best_model), col = col_best_mod) +
#geom_label_repel(aes(temp, .fitted, label = model_name), fill = 'wLowte', nudge_y = 0.8, segment.size = 0.2, segment.colour = 'grey50', data = filter(d_labs, model_name == best_model), col = col_best_mod) +
geom_point(aes(temp, rate), Asterio_Hi) +
theme_bw(base_size = 12) +
theme(legend.position = 'none') +
labs(x = 'Temperature (ºC)',
y = 'Growth rate')+
geom_hline(aes(yintercept = 0), linetype = 2)
#get parameters:
d_fits$thomas
#subset with best model
d_fiti <- select(d_fits, Asterio,  thomas)
# create new list column of for Lowgh resolution data
d_preds <- mutate(d_fiti, new_data = map(Asterio, ~tibble(temp = seq(min(.x$temp), max(.x$temp), length.out = 100)))) %>%
# get rid of original data column
select(., -Asterio) %>%
# stack models into a single column, with an id column for model_name
pivot_longer(., names_to = 'model_name', values_to = 'fit', c( thomas)) %>%
# create new list column containing the predictions
# tLows uses both fit and new_data list columns
mutate(preds = map2(fit, new_data, ~augment(.x, newdata = .y))) %>%
# select only the columns we want to keep
select(  model_name, preds) %>%
# unlist the preds list column
unnest(preds)
glimpse(d_preds)
Asterio_Hi <- Asterio_Hi%>%
group_by(temp) %>%
mutate(meanrate = mean(rate))
ggplot(d_preds) +
geom_line(aes(temp, .fitted, col = model_name)) +
geom_point(aes(temp, rate), Asterio_Hi) +
theme_bw() +
#  facet_grid(~rep)+
theme(legend.position = 'none') +
# scale_color_brewer(type = 'qual', palette = 2) +
labs(x = 'Temperature (ºC)',
y = 'Metabolic rate',
title = 'All fitted thermal performance curves')+
facet_grid(~model_name)
# stack models and calculate extra params
Asterio_params <- pivot_longer(d_fiti, names_to = 'model_name', values_to = 'fit', c(thomas)) %>%
mutate(params = map(fit, calc_params)) %>%
unnest(params)
glimpse(Asterio_params)
df.Asterio_params <- data.frame(
species = 'Asterionellopsis',
model = Asterio_params[2],
topt = Asterio_params[5],
ctmin = Asterio_params[6],
ctmax = Asterio_params[7])
Dity_Hi <- data_subset %>%
filter(species == 'DityCux')%>%
select( species, temp,r) %>%
rename(temp = temp,
rate = r)
#### start ####
d_fits <- nest(Dity_Hi, Dity = c(temp, rate)) %>%
mutate(beta = map(Dity, ~nls_multstart(rate~beta_2012(temp = temp, a, b, c, d, e),
data = .x,
iter = c(6,6,6,6,6),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'beta_2012') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'beta_2012') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'beta_2012'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'beta_2012'),
supp_errors = 'Y',
convergence_count = FALSE)),
briere2 = map(Dity, ~nls_multstart(rate~briere2_1999(temp = temp, tmin, tmax, a,b),
data = .x,
iter = c(4,4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'briere2_1999') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'briere2_1999') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'briere2_1999'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'briere2_1999'),
supp_errors = 'Y',
convergence_count = FALSE)),
flinn = map(Dity, ~nls_multstart(rate~flinn_1991(temp = temp, a, b, c),
data = .x,
iter = c(5,5,5),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'flinn_1991') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'flinn_1991') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'flinn_1991'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'flinn_1991'),
supp_errors = 'Y',
convergence_count = FALSE)),
lactin2 = map(Dity, ~nls_multstart(rate~lactin2_1995(temp = temp, a, b, tmax, delta_t),
data = .x,
iter = c(4,4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'lactin2_1995') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'lactin2_1995') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'lactin2_1995'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'lactin2_1995'),
supp_errors = 'Y',
convergence_count = FALSE)),
ratkowsky = map(Dity, ~nls_multstart(rate~ratkowsky_1983(temp = temp, tmin, tmax, a, b),
data = .x,
iter = c(4,4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'ratkowsky_1983') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'ratkowsky_1983') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'ratkowsky_1983'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'ratkowsky_1983'),
supp_errors = 'Y',
convergence_count = FALSE)),
spain = map(Dity, ~nls_multstart(rate~spain_1982(temp = temp, a,b,c,r0),
data = .x,
iter = c(4,4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'spain_1982') - 1,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'spain_1982') + 1,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'spain_1982'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'spain_1982'),
supp_errors = 'Y',
convergence_count = FALSE)),
thomas2 = map(Dity, ~nls_multstart(rate~thomas_2017(temp = temp, a,b,c,d,e),
data = .x,
iter = c(3,3,3,3,3),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'thomas_2017') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'thomas_2017') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'thomas_2017'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'thomas_2017'),
supp_errors = 'Y',
convergence_count = FALSE)),
gaussian = map(Dity, ~nls_multstart(rate~gaussian_1987(temp = temp, rmax, topt, a),
data = .x,
iter = c(4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),
supp_errors = 'Y',
convergence_count = FALSE)),
oneill = map(Dity, ~nls_multstart(rate~oneill_1972(temp = temp, rmax, ctmax, topt, q10),
data = .x,
iter = c(4,4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'oneill_1972') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'oneill_1972') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'oneill_1972'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'oneill_1972'),
supp_errors = 'Y',
convergence_count = FALSE)),
thomas = map(Dity, ~nls_multstart(rate~thomas_2012(temp = temp, a,b,c,topt),
data = .x,
iter = c(4,4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'thomas_2012') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'thomas_2012') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'thomas_2012'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'thomas_2012'),
supp_errors = 'Y',
convergence_count = FALSE)),
weibull = map(Dity, ~nls_multstart(rate~weibull_1995(temp = temp,a, topt, b,c),
data = .x,
iter = c(4,4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'weibull_1995') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'weibull_1995') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'weibull_1995'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'weibull_1995'),
supp_errors = 'Y',
convergence_count = FALSE)))
# stack models
d_stack <- select(d_fits, -Dity) %>%
pivot_longer(., names_to = 'model_name', values_to = 'fit', beta:weibull)
# get predictions using augment
newdata <- tibble(temp = seq(min(Dity_Hi$temp), max(Dity_Hi$temp), length.out = 100))
d_preds <- d_stack %>%
mutate(., preds = map(fit, augment, newdata = newdata)) %>%
select(-fit) %>%
unnest(preds)
# take a random point from each model for labelling
d_labs <- filter(d_preds, temp < 30) %>%
group_by(., model_name) %>%
sample_n(., 1) %>%
ungroup()
# plot
ggplot(d_preds, aes(temp, rate)) +
geom_point(aes(temp, rate), Dity_Hi) +
geom_line(aes(temp, .fitted), col = 'blue') +
facet_wrap(~model_name, scales = 'free', ncol = 4) +
theme_bw(base_size = 12) +
theme(legend.position = 'none',
strip.text = element_text(hjust = 0),
strip.background = element_blank()) +
labs(x = 'Temperature (ºC)',
y = 'Metabolic rate',
title = 'Fits of every model with Topt available in rTPC') +
geom_hline(aes(yintercept = 0), linetype = 2)
str(d_stack)
#### Model selection ####
#As can be seen in the above plot, there is some variation in how the different model formulations fit to the data.
#We can use a information theoretic approach to compare between different models, using  measures of relative model fit - such as AIC, BIC, and AICc (AIC correcting for small sample size).
#AIC and BIC are both returned by **broom::glance()**, and AICc can be added using **MuMIn::AICc()**
#{r calculate_fit_measures}
d_ic <- d_stack %>%
mutate(.,
AICc =  map_dbl(fit, MuMIn::AICc)) %>%
select(-fit) %>%
arrange(AICc)
d_ic
#{r model_selection, fig.width=6, fig.height = 4}
# filter for best model
best_model = 'briere2'
best_model
# get colour code
col_best_mod = RColorBrewer::brewer.pal(n = 6, name = "Dark2")[6]
# plot
ggplot(d_preds, aes(temp, .fitted)) +
geom_line(aes(group = model_name), col = 'grey50', alpha = 0.5) +
geom_line(data = filter(d_preds, model_name == best_model), col = col_best_mod) +
#geom_label_repel(aes(temp, .fitted, label = model_name), fill = 'wLowte', nudge_y = 0.8, segment.size = 0.2, segment.colour = 'grey50', data = filter(d_labs, model_name == best_model), col = col_best_mod) +
geom_point(aes(temp, rate), Dity_Hi) +
theme_bw(base_size = 12) +
theme(legend.position = 'none') +
labs(x = 'Temperature (ºC)',
y = 'Growth rate')+
geom_hline(aes(yintercept = 0), linetype = 2)
#get parameters:
d_fits$briere2
#subset with best model
d_fiti <- select(d_fits, Dity,  briere2)
# create new list column of for Lowgh resolution data
d_preds <- mutate(d_fiti, new_data = map(Dity, ~tibble(temp = seq(min(.x$temp), max(.x$temp), length.out = 100)))) %>%
# get rid of original data column
select(., -Dity) %>%
# stack models into a single column, with an id column for model_name
pivot_longer(., names_to = 'model_name', values_to = 'fit', c( briere2)) %>%
# create new list column containing the predictions
# tLows uses both fit and new_data list columns
mutate(preds = map2(fit, new_data, ~augment(.x, newdata = .y))) %>%
# select only the columns we want to keep
select(  model_name, preds) %>%
# unlist the preds list column
unnest(preds)
glimpse(d_preds)
Dity_Hi <- Dity_Hi%>%
group_by(temp) %>%
mutate(meanrate = mean(rate))
ggplot(d_preds) +
geom_line(aes(temp, .fitted, col = model_name)) +
geom_point(aes(temp, rate), Dity_Hi) +
theme_bw() +
#  facet_grid(~rep)+
theme(legend.position = 'none') +
# scale_color_brewer(type = 'qual', palette = 2) +
labs(x = 'Temperature (ºC)',
y = 'Metabolic rate',
title = 'All fitted thermal performance curves')+
facet_grid(~model_name)
# stack models and calculate extra params
Dity_params <- pivot_longer(d_fiti, names_to = 'model_name', values_to = 'fit', c(briere2)) %>%
mutate(params = map(fit, calc_params)) %>%
unnest(params)
glimpse(Dity_params)
df.Dity_params <- data.frame(
species = 'Ditylum',
model = Dity_params[2],
topt = Dity_params[5],
ctmin = Dity_params[6],
ctmax = Dity_params[7])
Guido_Hi <- data_subset %>%
filter(species == 'Guido')%>%
select( species, temp,r) %>%
rename(temp = temp,
rate = r)
#### start ####
d_fits <- nest(Guido_Hi, Guido = c(temp, rate)) %>%
mutate(beta = map(Guido, ~nls_multstart(rate~beta_2012(temp = temp, a, b, c, d, e),
data = .x,
iter = c(6,6,6,6,6),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'beta_2012') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'beta_2012') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'beta_2012'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'beta_2012'),
supp_errors = 'Y',
convergence_count = FALSE)),
briere2 = map(Guido, ~nls_multstart(rate~briere2_1999(temp = temp, tmin, tmax, a,b),
data = .x,
iter = c(4,4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'briere2_1999') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'briere2_1999') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'briere2_1999'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'briere2_1999'),
supp_errors = 'Y',
convergence_count = FALSE)),
flinn = map(Guido, ~nls_multstart(rate~flinn_1991(temp = temp, a, b, c),
data = .x,
iter = c(5,5,5),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'flinn_1991') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'flinn_1991') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'flinn_1991'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'flinn_1991'),
supp_errors = 'Y',
convergence_count = FALSE)),
lactin2 = map(Guido, ~nls_multstart(rate~lactin2_1995(temp = temp, a, b, tmax, delta_t),
data = .x,
iter = c(4,4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'lactin2_1995') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'lactin2_1995') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'lactin2_1995'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'lactin2_1995'),
supp_errors = 'Y',
convergence_count = FALSE)),
ratkowsky = map(Guido, ~nls_multstart(rate~ratkowsky_1983(temp = temp, tmin, tmax, a, b),
data = .x,
iter = c(4,4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'ratkowsky_1983') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'ratkowsky_1983') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'ratkowsky_1983'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'ratkowsky_1983'),
supp_errors = 'Y',
convergence_count = FALSE)),
spain = map(Guido, ~nls_multstart(rate~spain_1982(temp = temp, a,b,c,r0),
data = .x,
iter = c(4,4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'spain_1982') - 1,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'spain_1982') + 1,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'spain_1982'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'spain_1982'),
supp_errors = 'Y',
convergence_count = FALSE)),
thomas2 = map(Guido, ~nls_multstart(rate~thomas_2017(temp = temp, a,b,c,d,e),
data = .x,
iter = c(3,3,3,3,3),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'thomas_2017') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'thomas_2017') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'thomas_2017'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'thomas_2017'),
supp_errors = 'Y',
convergence_count = FALSE)),
gaussian = map(Guido, ~nls_multstart(rate~gaussian_1987(temp = temp, rmax, topt, a),
data = .x,
iter = c(4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),
supp_errors = 'Y',
convergence_count = FALSE)),
oneill = map(Guido, ~nls_multstart(rate~oneill_1972(temp = temp, rmax, ctmax, topt, q10),
data = .x,
iter = c(4,4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'oneill_1972') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'oneill_1972') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'oneill_1972'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'oneill_1972'),
supp_errors = 'Y',
convergence_count = FALSE)),
thomas = map(Guido, ~nls_multstart(rate~thomas_2012(temp = temp, a,b,c,topt),
data = .x,
iter = c(4,4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'thomas_2012') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'thomas_2012') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'thomas_2012'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'thomas_2012'),
supp_errors = 'Y',
convergence_count = FALSE)),
weibull = map(Guido, ~nls_multstart(rate~weibull_1995(temp = temp,a, topt, b,c),
data = .x,
iter = c(4,4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'weibull_1995') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'weibull_1995') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'weibull_1995'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'weibull_1995'),
supp_errors = 'Y',
convergence_count = FALSE)))
# stack models
d_stack <- select(d_fits, -Guido) %>%
pivot_longer(., names_to = 'model_name', values_to = 'fit', beta:weibull)
# get predictions using augment
newdata <- tibble(temp = seq(min(Guido_Hi$temp), max(Guido_Hi$temp), length.out = 100))
d_preds <- d_stack %>%
mutate(., preds = map(fit, augment, newdata = newdata)) %>%
select(-fit) %>%
unnest(preds)
# take a random point from each model for labelling
d_labs <- filter(d_preds, temp < 30) %>%
group_by(., model_name) %>%
sample_n(., 1) %>%
ungroup()
# plot
ggplot(d_preds, aes(temp, rate)) +
geom_point(aes(temp, rate), Guido_Hi) +
geom_line(aes(temp, .fitted), col = 'blue') +
facet_wrap(~model_name, scales = 'free', ncol = 4) +
theme_bw(base_size = 12) +
theme(legend.position = 'none',
strip.text = element_text(hjust = 0),
strip.background = element_blank()) +
labs(x = 'Temperature (ºC)',
y = 'Metabolic rate',
title = 'Fits of every model with Topt available in rTPC') +
geom_hline(aes(yintercept = 0), linetype = 2)
str(d_stack)
#### Model selection ####
#As can be seen in the above plot, there is some variation in how the different model formulations fit to the data.
#We can use a information theoretic approach to compare between different models, using  measures of relative model fit - such as AIC, BIC, and AICc (AIC correcting for small sample size).
#AIC and BIC are both returned by **broom::glance()**, and AICc can be added using **MuMIn::AICc()**
#{r calculate_fit_measures}
d_ic <- d_stack %>%
mutate(.,
AICc =  map_dbl(fit, MuMIn::AICc)) %>%
select(-fit) %>%
arrange(AICc)
d_ic
#{r model_selection, fig.width=6, fig.height = 4}
# filter for best model
best_model = 'thomas'
best_model
# get colour code
col_best_mod = RColorBrewer::brewer.pal(n = 6, name = "Dark2")[6]
# plot
ggplot(d_preds, aes(temp, .fitted)) +
geom_line(aes(group = model_name), col = 'grey50', alpha = 0.5) +
geom_line(data = filter(d_preds, model_name == best_model), col = col_best_mod) +
#geom_label_repel(aes(temp, .fitted, label = model_name), fill = 'wLowte', nudge_y = 0.8, segment.size = 0.2, segment.colour = 'grey50', data = filter(d_labs, model_name == best_model), col = col_best_mod) +
geom_point(aes(temp, rate), Guido_Hi) +
theme_bw(base_size = 12) +
theme(legend.position = 'none') +
labs(x = 'Temperature (ºC)',
y = 'Growth rate')+
geom_hline(aes(yintercept = 0), linetype = 2)
#get parameters:
d_fits$thomas
#subset with best model
d_fiti <- select(d_fits, Guido,  thomas)
# create new list column of for Lowgh resolution data
d_preds <- mutate(d_fiti, new_data = map(Guido, ~tibble(temp = seq(min(.x$temp), max(.x$temp), length.out = 100)))) %>%
# get rid of original data column
select(., -Guido) %>%
# stack models into a single column, with an id column for model_name
pivot_longer(., names_to = 'model_name', values_to = 'fit', c( thomas)) %>%
# create new list column containing the predictions
# tLows uses both fit and new_data list columns
mutate(preds = map2(fit, new_data, ~augment(.x, newdata = .y))) %>%
# select only the columns we want to keep
select(  model_name, preds) %>%
# unlist the preds list column
unnest(preds)
glimpse(d_preds)
Guido_Hi <- Guido_Hi%>%
group_by(temp) %>%
mutate(meanrate = mean(rate))
ggplot(d_preds) +
geom_line(aes(temp, .fitted, col = model_name)) +
geom_point(aes(temp, rate), Guido_Hi) +
theme_bw() +
#  facet_grid(~rep)+
theme(legend.position = 'none') +
# scale_color_brewer(type = 'qual', palette = 2) +
labs(x = 'Temperature (ºC)',
y = 'Metabolic rate',
title = 'All fitted thermal performance curves')+
facet_grid(~model_name)
# stack models and calculate extra params
Guido_params <- pivot_longer(d_fiti, names_to = 'model_name', values_to = 'fit', c(thomas)) %>%
mutate(params = map(fit, calc_params)) %>%
unnest(params)
glimpse(Guido_params)
df.Guido_params <- data.frame(
species = 'Guinardia',
model = Guido_params[2],
topt = Guido_params[5],
ctmin = Guido_params[6],
ctmax = Guido_params[7])
df.all<- bind_rows(df.Asterio_params,df.Dity_params,df.Guido_params, df.Rhizo_params, df.Thala_params)
write.csv(df.all, file = 'allTPC.csv')
df.all
